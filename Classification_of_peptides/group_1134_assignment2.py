# -*- coding: utf-8 -*-
"""Group_1134.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1IhM2TySTCuWUGFbCMAQT_1916OcFf6py

#BDHM Assignment 2

#**Fixed length classification of peptides**

IMPORTING LIBRARIES
"""

!pip install protlearn

pip install --upgrade protlearn

import pandas as pd
import numpy as np
import protlearn 
from sklearn.preprocessing import LabelEncoder
from sklearn.model_selection import train_test_split
from sklearn.naive_bayes import GaussianNB
from sklearn.metrics import accuracy_score

"""LOADING TRAIN DATASET"""

print("Choose the Train data")

Train_data = input("Enter the path of train data:")

Train=pd.read_csv(Train_data)

#Train=pd.read_csv('/content/train (2).csv')

Train

"""REMOVING DUPLICATES FROM TRAIN DATASET"""

Train.drop_duplicates(subset ="Sequence",
                     keep = False, inplace = True)
Train

#converting it to an array
Train  = np.array(Train)
Train

#making a list of sequence as required by the protlearn package
Sequence = []
for i in range (6364):
  Sequence.append(Train[i][0])
Sequence

"""Removing sequence contining unnatural amino acid using protlearn"""

from protlearn.preprocessing import remove_unnatural

Sequence=protlearn.preprocessing.remove_unnatural(Sequence)

Sequence

"""#Feature Exatraction from Train Dataset

Extracting Amino acid composition feature using protlearn
"""

from protlearn.features import aac

comp, aa = aac(Sequence, remove_zero_cols=True)
comp

comp=pd.DataFrame(comp) #converting array to dataframe
comp

"""Exatracting dipeptide amino acid composition from sequence of  Train dataset"""

from protlearn.features import ngram
di, ngrams = ngram(Sequence, n=2)
di

di=pd.DataFrame(di)
di

"""Exatracting Tripeptide amino acid composition from sequence of  Train dataset"""

tri, ngrams = ngram(Sequence, n=3)

tri

tri=pd.DataFrame(tri)
tri

"""Exatracting binary profile pattern for each amino acid sequence in the dataset. """

from protlearn.features import binary
bpp = binary(Sequence, padding=True)
bpp

bpp=pd.DataFrame(bpp)

bpp

"""Concatinating all the features in pne dataframe which is our X Train"""

X_Train=pd.concat((comp,di,tri), axis=1)

X_Train

"""Getting the Train labels"""

Train=pd.DataFrame(Train)

Train

Y_Train=Train[1]

Y_Train #labels of train dataset

"""#Importing Test dataset"""

print("Choose test data:")

Test_data = input("Enter the path of test data:")

#Test=pd.read_csv('/content/test (4).csv')

Test=pd.read_csv(Test_data)

Test

print("Wait model is loading...")

Test=pd.DataFrame(Test)

#converting it to an array
Test  = np.array(Test)
Test

#making a list of sequence as required by the protlearn package
sequence = []
for i in range (1616):
  sequence.append(Test[i][1])
sequence

"""Removing sequence contining unnatural amino acid using protlearn"""

from protlearn.preprocessing import remove_unnatural

sequence=protlearn.preprocessing.remove_unnatural(sequence)

sequence

"""#Feature Exatraction from Test Dataset

Extracting Amino acid composition feature using protlearn
"""

from protlearn.features import aac

Comp, AA = aac(sequence, remove_zero_cols=True)
Comp

Comp=pd.DataFrame(Comp)
Comp

"""Exatracting dipeptide amino acid composition from sequence of  Test dataset"""

from protlearn.features import ngram
Di, Ngrams = ngram(sequence, n=2)
Di

Di=pd.DataFrame(Di)
Di

"""Exatracting Tripeptide amino acid composition from sequence of  Test dataset"""

Tri, Ngrams = ngram(sequence, n=3)
Tri

Tri=pd.DataFrame(Tri)
Tri

"""Exatracting binary profile pattern for each amino acid sequence in the dataset. """

from protlearn.features import binary
Bpp = binary(sequence, padding=True)
Bpp

Bpp=pd.DataFrame(Bpp)

Bpp

"""**Feature Selection**

Concatinating all the features in pne dataframe which is our X Train
"""

X_Test=pd.concat((Comp,Di,Tri), axis=1)
X_Test

X_Train

"""**Principal component analysis.**"""

from protlearn.dimreduction import pca
rrrrreduced = pca(X_Train, thres=.9)
rrrrreduced

from protlearn.dimreduction import pca
RRRRReduced = pca(X_Test, thres=.9)
RRRRReduced

"""*Normalizing X train and X test (Features)*"""

from sklearn import preprocessing

X_Train = preprocessing.normalize(X_Train)
X_Train

X_Test = preprocessing.normalize(X_Test)
X_Test

"""#Applying Machine learning Models

**Gaussian Naive Bayes**
"""

from sklearn.naive_bayes import GaussianNB
gnb = GaussianNB()
gnb.fit(X_Train,Y_Train) #training the model

y_pred_test = gnb.predict(X_Test)
y_pred_test

"""**Decision Tree**"""

from sklearn.tree import DecisionTreeClassifier
dt = DecisionTreeClassifier()
dt.fit(X_Train,Y_Train)
y_pred2 = dt.predict(X_Test)

"""**KNeighborsClassifier**"""

from sklearn.neighbors import KNeighborsClassifier
clf = KNeighborsClassifier(n_neighbors=3,algorithm='ball_tree')
clf.fit(X_Train,Y_Train) #training model
y_pred3 = clf.predict(X_Test)

y_pred3

y_pred3=pd.DataFrame(y_pred3)
y_pred3 #predicted label

""" **SVM**"""

from sklearn.svm import SVC
svc1 = SVC(C=50,kernel='rbf',gamma=1)     
svc1.fit(X_Train,Y_Train) # training model
y_pred4 = svc1.predict(X_Test)

y_pred4=pd.DataFrame(y_pred4)

y_pred4 #predicted label

"""**OneVsRestClassifier**"""

from sklearn.multiclass import OneVsRestClassifier
from sklearn.svm import SVC
clf = OneVsRestClassifier(SVC()).fit(X_Train,Y_Train)
y_pred5=clf.predict(X_Test)

from sklearn.multiclass import OneVsRestClassifier
from sklearn.svm import SVC
clf = OneVsRestClassifier(SVC()).fit(X_Train,Y_Train)
y_pred5=clf.predict(X_Test)

from sklearn.multiclass import OneVsRestClassifier
from sklearn.svm import SVC
clf = OneVsRestClassifier(SVC()).fit(X_Train,Y_Train)
y_pred5=clf.predict(X_Test)

"""Writing the output file"""

Test=pd.DataFrame(Test)

Test

SubmissionCC=pd.concat((Test[0], y_pred4), axis=1, keys=['ID', 'Lable'])

SubmissionCC

SubmissionCC.to_csv('Fianl_submission.csv')